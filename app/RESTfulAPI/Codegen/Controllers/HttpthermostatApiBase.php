<?php
/**
 * HTTP Thermostat
 * HTTP Thermostat API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\RESTfulAPI\Codegen\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

abstract class HttpthermostatApiBase extends Controller
{
    /**
     * Operation auto
     *
     * auto.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     *
     * @return \Illuminate\Http\Response
     */
    public function autoWithValidate(Request $request, $name)
    {
        $this->autoValidate($request, $name);
        return $this->auto($request, $name);
    }

    /**
     * Validate auto
     *
     * auto.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     *
     */
    protected function autoValidate(Request $request, $name)
    {
        // path params validation

        // not path params validation
    }

    /**
     * Operation comfort
     *
     * comfort.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     *
     * @return \Illuminate\Http\Response
     */
    public function comfortWithValidate(Request $request, $name)
    {
        $this->comfortValidate($request, $name);
        return $this->comfort($request, $name);
    }

    /**
     * Validate comfort
     *
     * comfort.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     *
     */
    protected function comfortValidate(Request $request, $name)
    {
        // path params validation

        // not path params validation
    }

    /**
     * Operation noFrost
     *
     * no-frost.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     *
     * @return \Illuminate\Http\Response
     */
    public function noFrostWithValidate(Request $request, $name)
    {
        $this->noFrostValidate($request, $name);
        return $this->noFrost($request, $name);
    }

    /**
     * Validate noFrost
     *
     * no-frost.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     *
     */
    protected function noFrostValidate(Request $request, $name)
    {
        // path params validation

        // not path params validation
    }

    /**
     * Operation off
     *
     * off.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     *
     * @return \Illuminate\Http\Response
     */
    public function offWithValidate(Request $request, $name)
    {
        $this->offValidate($request, $name);
        return $this->off($request, $name);
    }

    /**
     * Validate off
     *
     * off.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     *
     */
    protected function offValidate(Request $request, $name)
    {
        // path params validation

        // not path params validation
    }

    /**
     * Operation status
     *
     * Get any thermostat info.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     *
     * @return \Illuminate\Http\Response
     */
    public function statusWithValidate(Request $request, $name)
    {
        $this->statusValidate($request, $name);
        return $this->status($request, $name);
    }

    /**
     * Validate status
     *
     * Get any thermostat info.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     *
     */
    protected function statusValidate(Request $request, $name)
    {
        // path params validation

        // not path params validation
    }

    /**
     * Operation targetHeatingCoolingState
     *
     * Set heating/cooling state.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     * @param float $state  (required)
     *
     * @return \Illuminate\Http\Response
     */
    public function targetHeatingCoolingStateWithValidate(Request $request, $name, $state)
    {
        $this->targetHeatingCoolingStateValidate($request, $name, $state);
        return $this->targetHeatingCoolingState($request, $name, $state);
    }

    /**
     * Validate targetHeatingCoolingState
     *
     * Set heating/cooling state.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     * @param float $state  (required)
     *
     */
    protected function targetHeatingCoolingStateValidate(Request $request, $name, $state)
    {
        // path params validation

        // not path params validation
    }

    /**
     * Operation targetRelativeHumidity
     *
     * Set target relative humidity.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     * @param float $humidity  (required)
     *
     * @return \Illuminate\Http\Response
     */
    public function targetRelativeHumidityWithValidate(Request $request, $name, $humidity)
    {
        $this->targetRelativeHumidityValidate($request, $name, $humidity);
        return $this->targetRelativeHumidity($request, $name, $humidity);
    }

    /**
     * Validate targetRelativeHumidity
     *
     * Set target relative humidity.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     * @param float $humidity  (required)
     *
     */
    protected function targetRelativeHumidityValidate(Request $request, $name, $humidity)
    {
        // path params validation

        // not path params validation
    }

    /**
     * Operation targetTemperature
     *
     * Set target temperature.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     * @param float $temp  (required)
     *
     * @return \Illuminate\Http\Response
     */
    public function targetTemperatureWithValidate(Request $request, $name, $temp)
    {
        $this->targetTemperatureValidate($request, $name, $temp);
        return $this->targetTemperature($request, $name, $temp);
    }

    /**
     * Validate targetTemperature
     *
     * Set target temperature.
     *
     * @param Request $request request object (required)
     * @param string $name  (required)
     * @param float $temp  (required)
     *
     */
    protected function targetTemperatureValidate(Request $request, $name, $temp)
    {
        // path params validation

        // not path params validation
    }

    abstract protected function auto(Request $request, $name);
    abstract protected function comfort(Request $request, $name);
    abstract protected function noFrost(Request $request, $name);
    abstract protected function off(Request $request, $name);
    abstract protected function status(Request $request, $name);
    abstract protected function targetHeatingCoolingState(Request $request, $name, $state);
    abstract protected function targetRelativeHumidity(Request $request, $name, $humidity);
    abstract protected function targetTemperature(Request $request, $name, $temp);
}
