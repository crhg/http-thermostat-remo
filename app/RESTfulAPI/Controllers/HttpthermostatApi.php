<?php
/**
 * HTTP Thermostat
 * HTTP Thermostat API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\RESTfulAPI\Controllers;

use App\RESTfulAPI\Codegen\Controllers\HttpthermostatApiBase;
use Crhg\RemoClient\Api\DefaultApi;
use Crhg\RemoClient\Model\AirConParams;
use Crhg\RemoClient\Model\Appliance;
use Crhg\RemoClient\Model\ApplianceType;
use Crhg\RemoClient\Model\Button;
use Crhg\RemoClient\Model\Device;
use Crhg\RemoClient\Model\OperationMode;
use http\Exception\InvalidArgumentException;
use Illuminate\Http\Request;
use Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

class HttpthermostatApi extends HttpthermostatApiBase
{
    /**
     * Operation status
     *
     * Get any thermostat info.
     *
     * @param Request $request
     * @param string $name thermostat name
     *
     * @return \Illuminate\Http\JsonResponse
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function status(Request $request, $name)
    {
        \Log::debug('status', ['accessory' => $name]);
        /** @var DefaultApi $api */
        $api = app()->make(DefaultApi::class);

        /** @var Appliance[] $appliances */
        $appliances = $api->appliancesGet();
        /** @var Appliance $aircon */
        $aircon = array_first($appliances, function (Appliance $a) use ($name) { return $a->getId() === $name; });
        if ($aircon === null) {
            throw new NotFoundHttpException("$name not found");
        }
        if ($aircon->getType() !== ApplianceType::AC) {
            throw new NotFoundHttpException("$name is not a thermostat");
        }

        $settings = $aircon->getSettings();
        $temp = $settings->getTemp();
        $state = $this->convertHeatingCoolingState($settings);

        $device_id = $aircon->getDevice()->getId();
        $devices = $api->devicesGet();
        /** @var Device $device */
        $device = array_first($devices, function (Device $d) use ($device_id) { return $d->getId() === $device_id; });
        if ($device === null) {
            throw new \RuntimeException("device not found: $device_id for $name");
        }

        $events = $device->getNewestEvents();
        $te = $events->getTe();
        $current_te = $te->getVal();
        $hu = $events->getHu();
        $current_hu = $hu->getVal();

        $result = [
            'targetHeatingCoolingState' => 0 + $state,
            'targetTemperature' => 0.0 + $temp,
            'targetRelativeHumidity' => 0.0 + 50.0,
            'currentHeatingCoolingState' => 0 + $state,
            'currentTemperature' => 0.0 + $current_te,
            'currentRelativeHumidity' => 0.0 + $current_hu,
        ];

        return Response::json($result);
    }

    private function convertHeatingCoolingState(AirConParams $settings): int
    {
        if ($settings->getButton() === Button::POWER_OFF) {
            return 0;
        }

        if ($settings->getMode() === OperationMode::WARM) {
            return 1;
        }

        return 2;
    }

    /**
     * Operation targetHeatingCoolingState
     *
     * Set heating/cooling state.
     *
     * @param Request $request
     * @param string $name
     * @param float $state (required)
     * @return \Illuminate\Http\Response
     * @throws \Exception
     */
    protected function targetHeatingCoolingState(Request $request, $name, $state)
    {
        \Log::debug('targetHeatingCoolingState', ['accessory' => $name, 'state' => $state]);

        switch ($state) {
            case 0:
                $this->setStatus($name, null, Button::POWER_OFF);
                break;
            case 1:
                $this->setStatus($name, OperationMode::WARM, Button::EMPTY);
                break;
            case 2:
                $this->setStatus($name, OperationMode::COOL, Button::EMPTY);
                break;
            case 3:
                $this->setStatus($name, null, Button::EMPTY);
                break;
            default:
                throw new InvalidArgumentException("invalid state: $state");
        }

        return response('Ok')->setStatusCode(200);
    }


    /**
     * @param Request $request
     * @param $name
     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function off(Request $request, $name)
    {
        \Log::debug('off', ['name' => $name]);

        /** @var DefaultApi $api */
        $api = app()->make(DefaultApi::class);

        $api->appliancesApplianceAirconSettingsPost($name, null, null, null, null, Button::POWER_OFF);

        return response('Ok')->setStatusCode(200);
    }

    /**
     * @param Request $request
     * @param $name
     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function comfort(Request $request, $name)
    {
        \Log::debug('comfort', ['name' => $name]);

        $this->setStatus($name, OperationMode::WARM, Button::EMPTY);

        return response('Ok')->setStatusCode(200);
    }

    /**
     * @param Request $request
     * @param $name
     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function noFrost(Request $request, $name)
    {
        \Log::debug('noFrost', ['name' => $name]);

        $this->setStatus($name, OperationMode::COOL, Button::EMPTY);

        return response('Ok')->setStatusCode(200);
    }


    /**
     * @param Request $request
     * @param $name
     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function auto(Request $request, $name)
    {
        \Log::debug('auto', ['name' => $name]);

        $this->setStatus($name,null, Button::EMPTY);

        return response('Ok')->setStatusCode(200);
    }

    /**
     * @param $name
     * @param $mode
     * @param $button
     * @throws \Crhg\RemoClient\ApiException
     */
    private function setStatus($name, $mode, $button)
    {
        /** @var DefaultApi $api */
        $api = app()->make(DefaultApi::class);

        $api->appliancesApplianceAirconSettingsPost($name, null, $mode, null, null, $button);
    }

    /**
     * Operation targetRelativeHumidity
     *
     * Set target relative humidity.
     *
     * @param Request $request
     * @param string $name
     * @param float $humidity (required)
     *
     * @return \Illuminate\Http\Response
     */
    protected function targetRelativeHumidity(Request $request, $name, $humidity)
    {
        \Log::debug('targetRelativeHumidity', ['accessory' => $name, 'humidity' => $humidity]);

        return response('Ok')->setStatusCode(200);
    }

    /**
     * Operation targetTemperature
     *
     * Set target temperature.
     *
     * @param Request $request
     * @param string $name
     * @param float $temp (required)
     *
     * @return \Illuminate\Http\Response
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function targetTemperature(Request $request, $name, $temp)
    {
        \Log::debug('targetTemperature', ['accessory' => $name, 'temp' => $temp]);

        $this->setTemperature($name, $temp);

        return response('Ok')->setStatusCode(200);
    }

    /**
     * @param $name
     * @param $temp
     * @throws \Crhg\RemoClient\ApiException
     */
    private function setTemperature($name, $temp)
    {
        /** @var DefaultApi $api */
        $api = app()->make(DefaultApi::class);

        $api->appliancesApplianceAirconSettingsPost($name, $temp);
    }
}
