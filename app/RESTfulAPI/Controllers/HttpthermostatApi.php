<?php
/**
 * HTTP Thermostat
 * HTTP Thermostat API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\RESTfulAPI\Controllers;

use App\RESTfulAPI\Codegen\Controllers\HttpthermostatApiBase;
use App\Thermostat;
use Crhg\RemoClient\Api\DefaultApi;
use Crhg\RemoClient\Model\Button;
use Crhg\RemoClient\Model\OperationMode;
use http\Exception\InvalidArgumentException;
use Illuminate\Http\Request;
use Response;


class HttpthermostatApi extends HttpthermostatApiBase
{
    /**
     * Operation status
     *
     * Get any thermostat info.
     *
     * @param Request $request
     * @param string $name thermostat name
     *
     * @return \Illuminate\Http\JsonResponse
     * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
     * @throws \RuntimeException
     * @throws \InvalidArgumentException
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function status(Request $request, $name)
    {
        /** @var Thermostat $thermostat */
        $thermostat = app()->make(Thermostat::class, ['id' => $name]);
        $result = $thermostat->getStatus();

        return Response::json($result);
    }

    /**
     * Operation targetHeatingCoolingState
     *
     * Set heating/cooling state.
     *
     * @param Request $request
     * @param string $name
     * @param float $state (required)
     * @return \Illuminate\Http\Response
     * @throws \Exception
     */
    protected function targetHeatingCoolingState(Request $request, $name, $state)
    {
        \Log::debug('targetHeatingCoolingState', ['accessory' => $name, 'state' => $state]);

        switch ($state) {
            case 0:
                $this->setStatus($name, null, Button::POWER_OFF);
                break;
            case 1:
                $this->setStatus($name, OperationMode::WARM, Button::EMPTY);
                break;
            case 2:
                $this->setStatus($name, OperationMode::COOL, Button::EMPTY);
                break;
            case 3:
                $this->setStatus($name, null, Button::EMPTY);
                break;
            default:
                throw new InvalidArgumentException("invalid state: $state");
        }

        return response('Ok')->setStatusCode(200);
    }


    /**
     * @param Request $request
     * @param $name
     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
     * @throws \InvalidArgumentException
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function off(Request $request, $name)
    {
        \Log::debug('off', ['name' => $name]);

        /** @var DefaultApi $api */
        $api = app()->make(DefaultApi::class);

        $api->appliancesApplianceAirconSettingsPost($name, null, null, null, null, Button::POWER_OFF);

        return response('Ok')->setStatusCode(200);
    }

    /**
     * @param Request $request
     * @param $name
     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
     * @throws \InvalidArgumentException
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function comfort(Request $request, $name)
    {
        \Log::debug('comfort', ['name' => $name]);

        $this->setStatus($name, OperationMode::WARM, Button::EMPTY);

        return response('Ok')->setStatusCode(200);
    }

    /**
     * @param Request $request
     * @param $name
     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
     * @throws \InvalidArgumentException
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function noFrost(Request $request, $name)
    {
        \Log::debug('noFrost', ['name' => $name]);

        $this->setStatus($name, OperationMode::COOL, Button::EMPTY);

        return response('Ok')->setStatusCode(200);
    }


    /**
     * @param Request $request
     * @param $name
     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Symfony\Component\HttpFoundation\Response
     * @throws \InvalidArgumentException
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function auto(Request $request, $name)
    {
        \Log::debug('auto', ['name' => $name]);

        $this->setStatus($name,null, Button::EMPTY);

        return response('Ok')->setStatusCode(200);
    }

    /**
     * @param $name
     * @param $mode
     * @param $button
     * @throws \InvalidArgumentException
     * @throws \Crhg\RemoClient\ApiException
     */
    private function setStatus($name, $mode, $button)
    {
        /** @var Thermostat $thermostat */
        $thermostat = app()->make(Thermostat::class, ['id' => $name]);

        $thermostat->setStatus($mode, $button);
    }

    /**
     * Operation targetRelativeHumidity
     *
     * Set target relative humidity.
     *
     * @param Request $request
     * @param string $name
     * @param float $humidity (required)
     *
     * @return \Illuminate\Http\Response
     * @throws \InvalidArgumentException
     */
    protected function targetRelativeHumidity(Request $request, $name, $humidity)
    {
        \Log::debug('targetRelativeHumidity', ['accessory' => $name, 'humidity' => $humidity]);

        return response('Ok')->setStatusCode(200);
    }

    /**
     * Operation targetTemperature
     *
     * Set target temperature.
     *
     * @param Request $request
     * @param string $name
     * @param float $temp (required)
     *
     * @return \Illuminate\Http\Response
     * @throws \InvalidArgumentException
     * @throws \Crhg\RemoClient\ApiException
     */
    protected function targetTemperature(Request $request, $name, $temp)
    {
        \Log::debug('targetTemperature', ['accessory' => $name, 'temp' => $temp]);

        $this->setTemperature($name, $temp);

        return response('Ok')->setStatusCode(200);
    }

    /**
     * @param $name
     * @param $temp
     * @throws \InvalidArgumentException
     * @throws \Crhg\RemoClient\ApiException
     */
    private function setTemperature($name, $temp)
    {
        /** @var Thermostat $thermostat */
        $thermostat = app()->make(Thermostat::class, ['id' => $name]);

        $thermostat->setTemperature($temp);
    }
}
